image: Visual Studio 2015

cache:
  - '%LOCALAPPDATA%\pip\Cache'

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\.ci\\appveyor\\run_with_env.cmd"
    BUILD_DOCS: "true"
    TEST_NOTEBOOKS: "true"
    USE_SIMA: "true"
    USE_SUITE2P: "false"

  matrix:

    # Versions listed below which are pre-installed on Appveyor will be
    # used when available.
    # See: https://www.appveyor.com/docs/windows-images-software/#python
    # Otherwise, the requested version of Python will be downloaded
    # and installed using the script .ci/appveyor/install.ps1

    - PYTHON: C:\Python35
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "32"
      SKIPPABLE: "false"

    - PYTHON: C:\Python38
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "32"
      USE_SIMA: "false"
      SKIPPABLE: "true"

    - PYTHON: C:\Python38-x64
      PYTHON_VERSION: "3.8.x"
      PYTHON_ARCH: "64"
      USE_SIMA: "false"
      SKIPPABLE: "true"

platform:
  - x86
  - x64

configuration: Fast

matrix:
  fast_finish: true
  exclude:
    - platform: x86
      PYTHON_ARCH: "64"
    - platform: x64
      PYTHON_ARCH: "32"
    - configuration: Fast
      SKIPPABLE: "true"

# Here we override common configuration
for:
# Override settings for release branches
-
  branches:
    only:
      - /^v?\d+(\.[x\d]+)+$/

  configuration: Release

  after_test:
    # If tests are successful, create binary packages for the project.
    - "%CMD_IN_ENV% python -m pip install --upgrade pip setuptools wheel"
    - "%CMD_IN_ENV% python setup.py sdist bdist_wheel --universal"
    - "%CMD_IN_ENV% python setup.py bdist_wininst"
    # Allow failure on bdist_msi, because it does not work with letters in
    # the package version number. Using letters is normal for development
    # versions (e.g. 1.3.dev0, 1.3.2rc4), and we don't want to cause Appveyor
    # to mark the build to fail because of it. The command will work for your
    # release versions if their version numbers are only numeric (e.g. 1.3.2).
    - "%CMD_IN_ENV% python setup.py bdist_msi || ver>nul"
    - ps: ls dist

  artifacts:
    # Archive the generated packages in the ci.appveyor.com build report.
    - path: dist\*

init:
  - ECHO "init"

install:
  - ECHO "Filesystem root:"
  - ps: ls "C:/"

  - ECHO "Installed SDKs:"
  - ps: |
      If (Test-Path "C:/Program Files/Microsoft SDKs/Windows") {
        ls "C:/Program Files/Microsoft SDKs/Windows"
      }

  # Install Python (from the official .msi of https://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & .ci\appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET "PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - python --version
  - >-
     %CMD_IN_ENV%
     python -c "import sys,platform,struct;
     print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"

  # Upgrade to the latest version of pip, setuptools, wheel
  - "%CMD_IN_ENV% python -m pip install --upgrade pip setuptools wheel"

  # Show current directory contents
  - ECHO "Current directory:"
  - ps: ls

  # Show PATH variable
  - ECHO "PATH:"
  - ECHO "%PATH%"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% python -m pip install --editable .[test]"
  - IF "%BUILD_DOCS%"=="true" ( %CMD_IN_ENV% python -m pip install --editable .[docs] )
  # Conditionally install the packages which are needed for plotting
  # Also, tell matplotlib to use the agg backend and not X server
  - IF "%TEST_NOTEBOOKS%"=="true" ( SET "MPLBACKEND=agg" )
  - IF "%TEST_NOTEBOOKS%"=="true" ( %CMD_IN_ENV% python -m pip install --editable .[plotting] )
  - IF "%USE_SIMA%"=="true" ( %CMD_IN_ENV% python -m pip install sima ) ELSE ( DEL examples\*SIMA* examples\*sima* )
  - IF "%USE_SUITE2P%"=="true" ( %CMD_IN_ENV% python -m pip install suite2p ) ELSE ( DEL examples\*Suite2p* examples\*suite2p* )

build: false

test_script:
  # Run the project tests and store results in testresults.xml log
  - "%CMD_IN_ENV% python -m pytest --cov=fissa --cov-report term --cov-report xml --cov-config .coveragerc --junitxml=testresults.xml"
  # Check documentation can be built
  - cd docs
  - IF "%BUILD_DOCS%"=="true" ( make.bat html )
  - cd ..
  # Check notebooks can be run
  - IF "%TEST_NOTEBOOKS%"=="true" ( %CMD_IN_ENV% python -m pytest --nbsmoke-run ./examples/ )
  - IF "%TEST_NOTEBOOKS%"=="true" ( %CMD_IN_ENV% python -m pytest --nbsmoke-lint ./examples/ )

on_success:
  # Push coverage reports
  - '%CMD_IN_ENV% python -m pip install codecov'
  - '%CMD_IN_ENV% python -m codecov -f coverage.xml || echo "Codecov push failed" && ver>nul'

on_finish:
  # Upload test results to AppVeyor
  - ps: |
      If (Test-Path .\testresults.xml) {
        (new-object net.webclient).UploadFile(
          "https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)",
          (Resolve-Path .\testresults.xml)
        )
      }
      $LastExitCode = 0
